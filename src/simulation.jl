#---functions for simulating data:
"""
    addstages!(X::AbstractMatrix{T}, stageno::Int; stagen::Int=1, stagep::Int=2, overlap::Int=1, blockprob::Number=1.0) where T

Adds stages to the matrix `X` in place.

This function modifies the input matrix `X` by adding `stageno` stages. Each stage is represented as a block of size `stagen × stagep`, with the blocks optionally overlapping. The values within each block are randomly generated based on the probability `blockprob`. If `blockprob` is 1.0, all values in the block are set to 1.0.

# Arguments
- `X::AbstractMatrix{T}`: The matrix to be modified in place.
- `stageno::Int`: Number of stages to add.
- `stagen::Int=1`: Number of rows in each stage (default: 1).
- `stagep::Int=2`: Number of columns in each stage (default: 2).
- `overlap::Int=1`: Number of overlapping columns between consecutive stages (default: 1).
- `blockprob::Number=1.0`: Probability that an entry in a block is set to 1.0 (default: 1.0). For values less than 1.0, a random block is generated with values between 0.0 and 1.0 based on this probability.

# Returns
- The matrix `X`, modified in place with the added stages.

"""
function addstages!(X::AbstractMatrix{T}, stageno::Int; stagen::Int=1, stagep::Int=2, overlap::Int=1, blockprob::Number=1.0) where T
    curp = 1
    curn = 1
    for i = 1:stageno
        if blockprob < 1.0
            curblock = 1.0 * (rand(stagen, stagep) .<= blockprob)
            X[curn:(curn+stagen-1), curp:(curp+stagep-1)] = curblock
        else
            X[curn:(curn+stagen-1), curp:(curp+stagep-1)] .= 1.0
        end
        curp += stagep - overlap
        curn += stagen
    end
    X
end

"""
    sim_scRNAseqData(dataseed::Int=1; 
                     n::Int=1000, 
                     num_genes::Int=50, 
                     stageno::Int=10, 
                     stagep::Int=Int(50 / 10), 
                     stagen::Int=Int(1000 / 10), 
                     stageoverlap::Int=2, 
                     blockprob::Float64=0.6, 
                     noiseprob::Float64=0.1)

Simulates a single-cell RNA sequencing (scRNA-seq) dataset with stages of gene expression patterns.

This function generates a matrix of dimensions `n × num_genes`, where each row corresponds to a cell and each column corresponds to a gene. The matrix is initialized with noise, and specific block structures are added based on the given number of stages (`stageno`). The expression values are generated by adding stages in a controlled, overlapping manner with probabilistic noise.

# Arguments
- `dataseed::Int=1`: Seed for the random number generator (default: 1).
- `n::Int=1000`: Number of cells (rows) to simulate (default: 1000).
- `num_genes::Int=50`: Number of genes (columns) to simulate (default: 50).
- `stageno::Int=10`: Number of stages (blocks of cells) to add (default: 10).
- `stagep::Int=Int(50 / 10)`: Number of genes per stage (default: `50 / 10`).
- `stagen::Int=Int(1000 / 10)`: Number of cells per stage (default: `1000 / 10`).
- `stageoverlap::Int=2`: Number of overlapping genes between consecutive stages (default: 2).
- `blockprob::Float64=0.6`: Probability of gene expression within a stage (default: 0.6).
- `noiseprob::Float64=0.1`: Probability of noise (random gene expression) in the initial matrix (default: 0.1).

# Returns
- A matrix of type `Float32` with dimensions `n × num_genes`, representing the simulated scRNA-seq data.

The function first generates a random noise matrix, then adds structured expression patterns as defined by the stages. The output is a floating-point matrix where each value represents the expression level of a gene in a cell.
"""
function sim_scRNAseqData(dataseed = 1;
    n = 1000, 
    num_genes = 50, 
    stageno = 10, 
    stagep = Int(50 / 10), 
    stagen = Int(1000 / 10), 
    stageoverlap = 2, 
    blockprob = 0.6, 
    noiseprob = 0.1, 
    )

    Random.seed!(dataseed)
    X = 1.0 * (rand(n, num_genes) .> (1 - noiseprob)) 

    X = addstages!(X, stageno; 
            stagen=stagen, stagep=stagep, 
            overlap=stageoverlap, blockprob=blockprob
    ) 
     
    return Float32.(X)
end 